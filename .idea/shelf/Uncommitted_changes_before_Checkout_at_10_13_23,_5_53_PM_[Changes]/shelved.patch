Index: code/Employee_management_system/src/main/java/Employee_Management_System/Security/Config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Employee_Management_System.Security.Config;\n\nimport Employee_Management_System.Security.Filter.JwtAuthenticationFilter;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\nimport static Employee_Management_System.credential.Role.ADMIN;\nimport static Employee_Management_System.credential.Role.STAFF;\nimport static org.springframework.http.HttpMethod.*;\n\n@Configuration\n@EnableWebSecurity\n@RequiredArgsConstructor\npublic class SecurityConfig {\n\n    private final JwtAuthenticationFilter jwtAuthFilter;\n    private final AuthenticationProvider authenticationProvider;\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n                .csrf()\n                .disable()\n                .authorizeRequests()\n                .requestMatchers(\n                        \"/api/v1/auth/**\",\n                        \"/index*\",\n                        \"/static/**\",\n                        \"/*.js\",\n                        \"/*.json\",\n                        \"/*.ico\")\n\n                .permitAll()\n                .requestMatchers(\"/admin/**\").hasAnyRole(ADMIN.name())\n                .requestMatchers(GET, \"/admin/**\").hasAnyAuthority(ADMIN.name())\n                .requestMatchers(POST, \"/admin/**\").hasAnyAuthority(ADMIN.name())\n                .requestMatchers(PUT, \"/admin/**\").hasAnyAuthority(ADMIN.name())\n                .requestMatchers(DELETE, \"/admin/**\").hasAnyAuthority(ADMIN.name())\n\n                .requestMatchers(\"/staff\").hasAnyRole(ADMIN.name(), STAFF.name())\n                .requestMatchers(GET, \"/staff/**\").hasAnyAuthority(ADMIN.name(), STAFF.name())\n                .requestMatchers(POST, \"/staff/**\").hasAnyAuthority(ADMIN.name(), STAFF.name())\n                .requestMatchers(PUT, \"/staff/**\").hasAnyAuthority(ADMIN.name(), STAFF.name())\n                .requestMatchers(DELETE, \"/staff/**\").hasAnyAuthority(ADMIN.name(), STAFF.name())\n\n                //.requestMatchers()\n                .anyRequest()\n                .authenticated()\n                .and()\n                .formLogin().loginPage(\"/index.html\")\n                .loginProcessingUrl(\"/perform_login\")\n                .defaultSuccessUrl(\"/homepage.html\", true)\n                .failureUrl(\"/index.html?error=true\")\n                .and()\n                .sessionManagement()\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authenticationProvider(authenticationProvider)\n                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)\n                //.logout()\n                //.logoutUrl(\"/api/v1/auth/logout\")\n                //.addLogoutHandler(logoutHandler)\n                //.logoutSuccessHandler((request, response, authentication) -> SecurityContextHolder.clearContext())\n        ;\n\n        return http.build();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/code/Employee_management_system/src/main/java/Employee_Management_System/Security/Config/SecurityConfig.java b/code/Employee_management_system/src/main/java/Employee_Management_System/Security/Config/SecurityConfig.java
--- a/code/Employee_management_system/src/main/java/Employee_Management_System/Security/Config/SecurityConfig.java	
+++ b/code/Employee_management_system/src/main/java/Employee_Management_System/Security/Config/SecurityConfig.java	
@@ -4,6 +4,7 @@
 import lombok.RequiredArgsConstructor;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.http.HttpMethod;
 import org.springframework.security.authentication.AuthenticationProvider;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
@@ -38,17 +39,17 @@
                         "/*.ico")
 
                 .permitAll()
-                .requestMatchers("/admin/**").hasAnyRole(ADMIN.name())
-                .requestMatchers(GET, "/admin/**").hasAnyAuthority(ADMIN.name())
-                .requestMatchers(POST, "/admin/**").hasAnyAuthority(ADMIN.name())
-                .requestMatchers(PUT, "/admin/**").hasAnyAuthority(ADMIN.name())
-                .requestMatchers(DELETE, "/admin/**").hasAnyAuthority(ADMIN.name())
-
-                .requestMatchers("/staff").hasAnyRole(ADMIN.name(), STAFF.name())
-                .requestMatchers(GET, "/staff/**").hasAnyAuthority(ADMIN.name(), STAFF.name())
-                .requestMatchers(POST, "/staff/**").hasAnyAuthority(ADMIN.name(), STAFF.name())
-                .requestMatchers(PUT, "/staff/**").hasAnyAuthority(ADMIN.name(), STAFF.name())
-                .requestMatchers(DELETE, "/staff/**").hasAnyAuthority(ADMIN.name(), STAFF.name())
+//                .requestMatchers("/admin/**").hasAnyRole(ADMIN.name())
+//                .requestMatchers(GET, "/admin/**").hasAnyAuthority(ADMIN.name())
+//                .requestMatchers(POST, "/admin/**").hasAnyAuthority(ADMIN.name())
+//                .requestMatchers(PUT, "/admin/**").hasAnyAuthority(ADMIN.name())
+//                .requestMatchers(DELETE, "/admin/**").hasAnyAuthority(ADMIN.name())
+//
+//                .requestMatchers("/staff").hasAnyRole(ADMIN.name(), STAFF.name())
+//                .requestMatchers(GET, "/staff/**").hasAnyAuthority(ADMIN.name(), STAFF.name())
+//                .requestMatchers(POST, "/staff/**").hasAnyAuthority(ADMIN.name(), STAFF.name())
+//                .requestMatchers(PUT, "/staff/**").hasAnyAuthority(ADMIN.name(), STAFF.name())
+//                .requestMatchers(DELETE, "/staff/**").hasAnyAuthority(ADMIN.name(), STAFF.name())
 
                 //.requestMatchers()
                 .anyRequest()
Index: code/Employee_management_system/src/main/java/Employee_Management_System/user/AdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/code/Employee_management_system/src/main/java/Employee_Management_System/user/AdminController.java b/code/Employee_management_system/src/main/java/Employee_Management_System/user/EmployeeController.java
rename from code/Employee_management_system/src/main/java/Employee_Management_System/user/AdminController.java
rename to code/Employee_management_system/src/main/java/Employee_Management_System/user/EmployeeController.java
--- a/code/Employee_management_system/src/main/java/Employee_Management_System/user/AdminController.java	
+++ b/code/Employee_management_system/src/main/java/Employee_Management_System/user/EmployeeController.java	
@@ -9,9 +9,9 @@
 import Exception.ResourceNotFoundException;
 
 @RestController
-@RequestMapping("/admin")
+//@RequestMapping("/admin")
 @CrossOrigin("http://localhost:3000")
-public class AdminController {
+public class EmployeeController {
     @Autowired
     private EmployeeService employeeService;
 
@@ -20,7 +20,7 @@
 //        this.employeeService = employeeService;
 //    }
 
-    @GetMapping("/allemployee")
+    @GetMapping("/admin/allemployee")
     public List<Employee> getAllEmployee(){
         return employeeService.getAllEmployee();
     }
